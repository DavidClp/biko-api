generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role
  recommendation_code String? @unique
  cpf                 String? @unique
  pix_key             String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client?
  provider Provider?

  sentMessages      Message[]          @relation("SentMessages")
  receivedMessages  Message[]          @relation("ReceivedMessages")
  passwordRecovery  PasswordRecovery[]
  
  // Relacionamentos para recomendações
  recommendationsGiven    Recommendation[] @relation("RecommendationGiver")
  recommendationsReceived Recommendation[] @relation("RecommendationReceiver")
}

model Client {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  city      String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  phone     String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests Request[]
}

model Provider {
  id              String         @id @default(uuid()) @db.Uuid
  userId          String         @unique
  name            String
  business_name   String?
  description     String?
  cityId          String?
  isAllCities     Boolean        @default(false)
  phone           String?
  socialLinks     Json?
  photoUrl        String?
  is_listed       Boolean        @default(true)
  status          ProviderStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  deletedAt       DateTime?
  updatedAt       DateTime       @updatedAt
  subscription_id String?        @db.Uuid

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests         Request[]
  city             cities?            @relation(fields: [cityId], references: [id])
  service_provider service_provider[]
  transactions     transactions[]
  subscriptions    subscriptions?     @relation(fields: [subscription_id], references: [id])
  provider_review  provider_reviews[]
  photos           ProviderPhotos[]
  metrics          ProviderMetrics[]
  city_provider    city_provider[]
}

model ProviderPhotos {
  id          String   @id @default(uuid())
  provider_id String   @db.Uuid
  photo_url   String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model provider_reviews {
  id          String   @id @default(uuid())
  provider_id String   @db.Uuid
  review      String?
  stars       Int
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model service_provider {
  id          String   @id @default(uuid())
  service_id  String
  provider_id String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     service  @relation(fields: [service_id], references: [id])
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model city_provider {
  id          String   @id @default(uuid())
  provider_id String   @db.Uuid
  city_id     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  city        cities   @relation(fields: [city_id], references: [id])
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model service {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  service_provider service_provider[]
}

model Request {
  id           String              @id @default(uuid())
  clientId     String
  providerId   String              @db.Uuid
  service_type String
  description  String?
  address      String?
  urgency      String?
  value        Decimal?            @default(0) @db.Decimal(10, 2)
  budget       Decimal?            @default(0) @db.Decimal(10, 2)
  observation  String?
  budgetStatus RequestBudgetStatus @default(PENDING)
  status       RequestStatus       @default(PENDING)
  createdAt    DateTime            @default(now())
  client       Client              @relation(fields: [clientId], references: [id])
  provider     Provider            @relation(fields: [providerId], references: [id])
  messages     Message[]
}

model Message {
  id          String      @id @default(uuid())
  request_id  String
  content     String
  sender_id   String
  receiver_id String
  type        MessageType @default(TEXT)
  viewed      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  sender   User    @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User    @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)
  request  Request @relation(fields: [request_id], references: [id], onDelete: Cascade)
}

model cities {
  id              String          @id
  name            String?
  state_id        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime
  name_no_accents String?
  state           state           @relation(fields: [state_id], references: [id])
  Provider        Provider[]
  city_provider   city_provider[]
}

model state {
  id              String   @id
  name            String?
  initials        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  name_no_accents String?
  cities          cities[]
}

model plans {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  description   String
  icon          String
  active        Boolean         @default(false)
  value         Decimal         @db.Decimal(10, 2)
  frequency     Int             @default(1)
  recurrence    Int?
  permissions   Json            @default("[]")
  is_test_free  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gateway_id    Int?
  subscriptions subscriptions[]
}

model transactions {
  id              String         @id @default(uuid()) @db.Uuid
  friendly_id     String?        @db.VarChar(255)
  query_id        String?        @db.Uuid
  contract_id     String?        @db.Uuid
  method          String         @db.VarChar(255)
  card_flag       String         @default("N/A") @db.VarChar(255)
  card_mask       String         @default("N/A") @db.VarChar(255)
  type            String         @db.VarChar(255)
  status          String         @db.VarChar(255)
  value           Decimal        @db.Decimal(10, 2)
  description     String         @db.VarChar(255)
  provider_id     String?        @db.Uuid
  subscription_id String?        @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  credit_card_id  String?        @db.Uuid
  gateway_id      Int?
  data_payment    DateTime?
  provider        Provider?      @relation(fields: [provider_id], references: [id])
  subscriptions   subscriptions? @relation(fields: [subscription_id], references: [id])
}

model subscriptions {
  card_flag           String         @db.VarChar(255)
  card_mask           String         @db.VarChar(255)
  next_execution      String?        @db.VarChar(255)
  next_expire_at      String?        @db.VarChar(255)
  status              String         @db.VarChar(255)
  value               Decimal        @db.Decimal(10, 2)
  plan_id             String         @db.Uuid
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  credit_card_id      String?        @db.Uuid
  gateway_id          Int?
  id                  String         @id @default(uuid()) @db.Uuid
  banking_billet_info Json?
  provider            Provider[]
  plans               plans          @relation(fields: [plan_id], references: [id])
  transactions        transactions[]
}

model ProviderMetrics {
  id          BigInt     @id @default(autoincrement())
  provider_id String     @db.Uuid
  metric_type MetricType
  count       Int        @default(1)
  date        DateTime   @default(now())
  metadata    Json?
  provider    Provider   @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@index([provider_id, metric_type, date])
  @@index([date])
}

model PasswordRecovery {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  usedAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  ON_BUDGET
  REJECTED
  COMPLETED
  CANCELLED_BY_CLIENT
  CANCELLED_BY_PROVIDER
}

enum RequestBudgetStatus {
  PENDING
  ACCEPTED
  CANCELLED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  PROPOSAL
  PROPOSAL_ACCEPTED
  PROPOSAL_CANCELLED
  PROPOSAL_REJECTED
}

enum MetricType {
  SEARCH_APPEARANCE
  PROFILE_VIEW
}


model Advertiser {
  id          String   @id @default(uuid())
  name        String
  email       String?
  phone       String?
  company     String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  banners     Banner[]
}

model Banner {
  id           String      @id @default(uuid())
  advertiserId String
  title        String
  description  String?
  imageUrl     String
  position     BannerPosition
  size         BannerSize
  isActive     Boolean     @default(true)
  clickCount   Int         @default(0)
  viewCount    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  publicVisibility BannerPublicVisibility @default(ALL)

  advertiser   Advertiser @relation(fields: [advertiserId], references: [id], onDelete: Cascade)
}

enum BannerPosition {
  PROVIDERS_LIST_TOP
  PROVIDERS_LIST_MIDDLE
  PROVIDERS_LIST_BOTTOM
  PROVIDER_DETAIL_TOP
  PROVIDER_DETAIL_SIDEBAR
  DASHBOARD_TOP
  DASHBOARD_SIDEBAR
}

enum BannerSize {
  MOBILE_FULL_WIDTH
  MOBILE_HALF_WIDTH
  MOBILE_SQUARE
  MOBILE_RECTANGLE
}

enum BannerPublicVisibility {
  ALL
  PROVIDER
  CLIENT
  ADMIN
}

model Recommendation {
  id          String   @id @default(uuid())
  giverId     String   // Usuário que fez a recomendação
  receiverId  String   // Usuário que foi recomendado (sempre um prestador)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  giver    User @relation("RecommendationGiver", fields: [giverId], references: [id], onDelete: Cascade)
  receiver User @relation("RecommendationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([giverId, receiverId])
  @@index([giverId])
  @@index([receiverId])
}
