generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client?
  provider Provider?

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Client {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  city      String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  updatedAt DateTime  @updatedAt
  phone     String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests Request[]
}

model Provider {
  id          String         @id @default(uuid())
  userId      String         @unique
  name        String
  description String?
  cityId      String?
  phone       String?
  socialLinks Json?
  photoUrl    String?
  is_listed   Boolean        @default(true)
  status      ProviderStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime       @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  requests         Request[]
  city             cities?            @relation(fields: [cityId], references: [id])
  service_provider service_provider[]
}

model service_provider {
  id          String   @id @default(uuid())
  service_id  String
  provider_id String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     service  @relation(fields: [service_id], references: [id])
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model service {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  service_provider service_provider[]
}

model Request {
  id           String        @id @default(uuid())
  clientId     String
  providerId   String
  service_type String
  description  String?
  address      String?
  urgency      String?
  value        Decimal?      @default(0) @db.Decimal(10, 2)
  status       RequestStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  client       Client        @relation(fields: [clientId], references: [id])
  provider     Provider      @relation(fields: [providerId], references: [id])
  messages     Message[]
}

model Message {
  id          String      @id @default(uuid())
  request_id  String
  content     String
  sender_id   String
  receiver_id String
  type        MessageType @default(TEXT)
  viewed      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  sender   User    @relation("SentMessages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver User    @relation("ReceivedMessages", fields: [receiver_id], references: [id], onDelete: Cascade)
  request  Request @relation(fields: [request_id], references: [id], onDelete: Cascade)
}

model cities {
  id              String     @id
  name            String?
  state_id        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  name_no_accents String?
  state           state      @relation(fields: [state_id], references: [id])
  Provider        Provider[]
}

model state {
  id              String   @id
  name            String?
  initials        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  name_no_accents String?
  cities          cities[]
}

enum Role {
  CLIENT
  PROVIDER
  ADMIN
}

enum ProviderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
}
